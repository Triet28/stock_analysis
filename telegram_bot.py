import logging
import datetime
from dotenv import load_dotenv
import os
import requests
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters
from settings import get_plot_settings, update_plot_settings, DEFAULT_PLOT_SETTINGS

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("telegram_bot.log")
    ]
)

logger = logging.getLogger(__name__)
load_dotenv()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu t∆∞∆°ng t√°c v·ªõi bot"""
    # T·∫°o keyboard ƒë·ªÉ hi·ªÉn th·ªã c√°c l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng
    keyboard = [
        [InlineKeyboardButton("Ph√¢n t√≠ch c·ªï phi·∫øu", callback_data="help_predict")],
        [InlineKeyboardButton("Xem bi·ªÉu ƒë·ªì", callback_data="help_chart")],
        [InlineKeyboardButton("C√†i ƒë·∫∑t bi·ªÉu ƒë·ªì", callback_data="settings_plot")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        f"üëã Xin ch√†o {update.effective_user.first_name}!\n\n"
        f"T√¥i l√† *Stock Analysis Bot*, tr·ª£ l√Ω ph√¢n t√≠ch ch·ª©ng kho√°n c·ªßa b·∫°n. "
        f"T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch c·ªï phi·∫øu v·ªõi c√°c ch·ªâ b√°o k·ªπ thu·∫≠t v√† ƒë∆∞a ra khuy·∫øn ngh·ªã.\n\n"
        f"*C√°c l·ªánh c∆° b·∫£n:*\n"
        f"‚Ä¢ /predict [m√£ CK] [short/long] - Ph√¢n t√≠ch v√† ƒë∆∞a ra khuy·∫øn ngh·ªã\n"
        f"‚Ä¢ /chart [m√£ CK] - Xem bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t\n"
        f"‚Ä¢ /settings - C√†i ƒë·∫∑t c√°c ch·ªâ b√°o k·ªπ thu·∫≠t\n"
        f"‚Ä¢ /help - Xem h∆∞·ªõng d·∫´n chi ti·∫øt\n\n"
        f"B·∫•m v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ t·ª´ng l·ªánh:"
    )
    
    await update.message.reply_text(
        welcome_message,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """H√†m hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot"""
    help_text = (
        "*ü§ñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG BOT PH√ÇN T√çCH CH·ª®NG KHO√ÅN*\n\n"
        "*C√°c l·ªánh c∆° b·∫£n:*\n\n"
        "1Ô∏è‚É£ */predict [m√£ CK] [short/long] [ng√†y]*\n"
        "   - Ph√¢n t√≠ch k·ªπ thu·∫≠t v√† ƒë∆∞a ra khuy·∫øn ngh·ªã\n"
        "   - `short`: Ph√¢n t√≠ch ng·∫Øn h·∫°n (20 ng√†y)\n"
        "   - `long`: Ph√¢n t√≠ch d√†i h·∫°n (60 ng√†y)\n"
        "   - `ng√†y`: (T√πy ch·ªçn) Ng√†y k·∫øt th√∫c ph√¢n t√≠ch (YYYY-MM-DD). N·∫øu ƒë·ªÉ tr·ªëng s·∫Ω l·∫•y ng√†y hi·ªán t·∫°i.\n"
        "   - V√≠ d·ª•: `/predict FPT short` ho·∫∑c `/predict FPT long 2025-08-05`\n\n"
        "2Ô∏è‚É£ */chart [m√£ CK]*\n"
        "   - Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t\n"
        "   - C√≥ th·ªÉ th√™m kho·∫£ng th·ªùi gian: `/chart FPT 2023-01-01 2023-03-01`. N·∫øu ƒë·ªÉ tr·ªëng s·∫Ω l·∫•y kho·∫£ng th·ªùi gian m·∫∑c ƒë·ªãnh (730 ng√†y k·ªÉ t·ª´ ng√†y hi·ªán t·∫°i)\n"
        "   - V√≠ d·ª•: `/chart VNM`\n\n"
        "3Ô∏è‚É£ */settings*\n"
        "   - T√πy ch·ªânh c√†i ƒë·∫∑t bi·ªÉu ƒë·ªì v√† c√°c ch·ªâ b√°o k·ªπ thu·∫≠t\n"
        "   - C√≥ th·ªÉ t√πy ch·ªânh ƒë∆∞·ª£c c√°c tham s·ªë nh∆∞: MA, MACD, RSI, D·∫£i Bollinger, M√¢y Ichimoku. Khi c√°c tham s·ªë n√†y ƒë∆∞·ª£c b·∫≠t, n√≥ s·∫Ω ƒë∆∞·ª£c th√™m v√†o bi·ªÉu ƒë·ªì.\n"
        "   - C√≥ th·ªÉ t√πy ch·ªânh vi·ªác hi·ªÉn th·ªã c√°c n·∫øn ƒë·∫∑c bi·ªát tr√™n bi·ªÉu ƒë·ªì. L∆∞u √Ω ch·ªâ c√≥ th·ªÉ hi·ªÉn th·ªã m·ªôt l√∫c 4 lo·∫°i n·∫øn ƒë·∫∑c bi·ªát\n"
        "4Ô∏è‚É£ */help*\n"
        "   - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y\n\n"
        "*C√°c ch·ªâ b√°o ƒë∆∞·ª£c s·ª≠ d·ª•ng:*\n"
        "‚Ä¢ RSI (Relative Strength Index)\n"
        "‚Ä¢ MACD (Moving Average Convergence Divergence)\n"
        "‚Ä¢ Bollinger Bands\n"
        "‚Ä¢ Moving Averages\n"
        "‚Ä¢ N·∫øn Nh·∫≠t (Candlestick Patterns)"
    )
    
    keyboard = [
        [InlineKeyboardButton("Ph√¢n t√≠ch c·ªï phi·∫øu", callback_data="help_predict")],
        [InlineKeyboardButton("Xem bi·ªÉu ƒë·ªì", callback_data="help_chart")],
        [InlineKeyboardButton("C√†i ƒë·∫∑t", callback_data="help_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        help_text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n v√†o c√°c n√∫t inline keyboard"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "help_predict":
        help_text = (
            "*üîç H∆Ø·ªöNG D·∫™N L·ªÜNH PREDICT*\n\n"
            "C√∫ ph√°p: `/predict [m√£ CK] [short/long] [ng√†y]`\n\n"
            "*Tham s·ªë:*\n"
            "‚Ä¢ `[m√£ CK]`: M√£ c·ªï phi·∫øu c·∫ßn ph√¢n t√≠ch (VD: FPT, VNM)\n"
            "‚Ä¢ `[short/long]`: Khung th·ªùi gian ph√¢n t√≠ch\n"
            "  - `short`: Ph√¢n t√≠ch ng·∫Øn h·∫°n (60 ng√†y)\n"
            "  - `long`: Ph√¢n t√≠ch d√†i h·∫°n (180 ng√†y)\n"
            "‚Ä¢ `[ng√†y]`: (T√πy ch·ªçn) Ng√†y k·∫øt th√∫c ph√¢n t√≠ch (YYYY-MM-DD)\n"
            "  - N·∫øu kh√¥ng ƒëi·ªÅn, m·∫∑c ƒë·ªãnh l√† ng√†y hi·ªán t·∫°i\n\n"
            "*V√≠ d·ª•:*\n"
            "‚Ä¢ `/predict FPT short` - Ph√¢n t√≠ch ng·∫Øn h·∫°n m√£ FPT\n"
            "‚Ä¢ `/predict VNM long` - Ph√¢n t√≠ch d√†i h·∫°n m√£ VNM\n"
            "‚Ä¢ `/predict FPT short 2025-08-05` - Ph√¢n t√≠ch m√£ FPT ƒë·∫øn ng√†y 05/08/2025\n\n"
            "*Bot s·∫Ω tr·∫£ v·ªÅ:*\n"
            "‚Ä¢ Khuy·∫øn ngh·ªã t·ªïng h·ª£p (BUY/SELL/HOLD)\n"
            "‚Ä¢ Chi ti·∫øt ph√¢n t√≠ch t·ª´ c√°c ch·ªâ b√°o k·ªπ thu·∫≠t\n"
            "‚Ä¢ C√°c t√≠n hi·ªáu giao d·ªãch v√† l√Ω do"
        )
        await query.message.reply_text(help_text, parse_mode="Markdown")
    
    elif query.data == "help_chart":
        help_text = (
            "*üìä H∆Ø·ªöNG D·∫™N L·ªÜNH CHART*\n\n"
            "C√∫ ph√°p: `/chart [m√£ CK]`\n\n"
            "*Tham s·ªë:*\n"
            "‚Ä¢ `[m√£ CK]`: M√£ c·ªï phi·∫øu c·∫ßn xem bi·ªÉu ƒë·ªì (VD: FPT, VNM)\n\n"
            "*V√≠ d·ª•:*\n"
            "‚Ä¢ `/chart FPT` - Xem bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t m√£ FPT\n\n"
            "*Bot s·∫Ω tr·∫£ v·ªÅ:*\n"
            "‚Ä¢ Bi·ªÉu ƒë·ªì n·∫øn (Candlestick) v·ªõi c√°c ch·ªâ b√°o k·ªπ thu·∫≠t\n"
            "‚Ä¢ Volume\n"
            "‚Ä¢ Moving Averages\n"
            "‚Ä¢ Bollinger Bands\n"
            "‚Ä¢ RSI v√† MACD (n·∫øu c√≥)"
        )
        await query.message.reply_text(help_text, parse_mode="Markdown")
        
    elif query.data == "help_settings":
        help_text = (
            "*‚öôÔ∏è H∆Ø·ªöNG D·∫™N L·ªÜNH SETTINGS*\n\n"
            "C√∫ ph√°p: `/settings`\n\n"
            "*M√¥ t·∫£:*\n"
            "‚Ä¢ L·ªánh n√†y cho ph√©p b·∫°n t√πy ch·ªânh c√†i ƒë·∫∑t cho c√°c ch·ªâ b√°o k·ªπ thu·∫≠t s·∫Ω hi·ªÉn th·ªã tr√™n bi·ªÉu ƒë·ªì\n"
            "‚Ä¢ B·∫≠t/t·∫Øt c√°c ch·ªâ b√°o: Moving Averages, Bollinger Bands, RSI, MACD, Ichimoku, Support & Resistance, v.v.\n"
            "‚Ä¢ C√†i ƒë·∫∑t m·∫´u h√¨nh n·∫øn ƒë·ªÉ ƒë√°nh d·∫•u tr√™n bi·ªÉu ƒë·ªì\n\n"
            "*C√°c t√≠nh nƒÉng:*\n"
            "‚Ä¢ B·∫≠t/t·∫Øt c√°c ch·ªâ b√°o k·ªπ thu·∫≠t\n"
            "‚Ä¢ T√πy ch·ªânh c√°c m·∫´u h√¨nh n·∫øn mu·ªën ƒë√°nh d·∫•u\n"
            "‚Ä¢ Kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh\n\n"
            "*L∆∞u √Ω:*\n"
            "‚Ä¢ C√†i ƒë·∫∑t ƒë∆∞·ª£c l∆∞u ri√™ng cho t·ª´ng ng∆∞·ªùi d√πng\n"
            "‚Ä¢ Khi s·ª≠ d·ª•ng l·ªánh `/chart`, bi·ªÉu ƒë·ªì s·∫Ω ƒë∆∞·ª£c t·∫°o theo c√†i ƒë·∫∑t c·ªßa b·∫°n"
        )
        await query.message.reply_text(help_text, parse_mode="Markdown")

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """H√†m ph√¢n t√≠ch c·ªï phi·∫øu v√† tr·∫£ v·ªÅ khuy·∫øn ngh·ªã"""
    if not context.args:
        await update.message.reply_text(
            '‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n v√† khung th·ªùi gian!\n'
            'V√≠ d·ª•: `/predict FPT short` ho·∫∑c `/predict FPT long 2025-08-05`',
            parse_mode="Markdown"
        )
        return
    
    # Ki·ªÉm tra c√≥ ƒë·ªß √≠t nh·∫•t 2 tham s·ªë (symbol v√† range) kh√¥ng
    if len(context.args) < 2:
        await update.message.reply_text(
            '‚ö†Ô∏è Thi·∫øu tham s·ªë khung th·ªùi gian (short/long)!\n'
            'V√≠ d·ª• ƒë√∫ng: `/predict FPT short` ho·∫∑c `/predict VNM long`',
            parse_mode="Markdown"
        )
        return
    
    symbol = context.args[0].upper()
    
    # Ki·ªÉm tra tham s·ªë range
    if context.args[1].lower() not in ["short", "long"]:
        await update.message.reply_text(
            '‚ö†Ô∏è Tham s·ªë khung th·ªùi gian kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n `short` ho·∫∑c `long`.\n'
            'V√≠ d·ª• ƒë√∫ng: `/predict FPT short` ho·∫∑c `/predict VNM long`',
            parse_mode="Markdown"
        )
        return
    
    range_value = context.args[1].lower()
    
    # M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i (ƒë√£ ƒë·ªãnh d·∫°ng)
    end_date = datetime.datetime.now().strftime('%Y-%m-%d')
    
    # Ki·ªÉm tra n·∫øu c√≥ tham s·ªë ng√†y c·ª• th·ªÉ
    if len(context.args) > 2:
        try:
            # L·∫•y v√† x√°c th·ª±c ƒë·ªãnh d·∫°ng ng√†y t·ª´ tham s·ªë
            date_param = context.args[2]
            datetime.datetime.strptime(date_param, '%Y-%m-%d')  # Ki·ªÉm tra ƒë·ªãnh d·∫°ng h·ª£p l·ªá
            end_date = date_param  # N·∫øu h·ª£p l·ªá, s·ª≠ d·ª•ng ng√†y t·ª´ tham s·ªë
        except ValueError:
            await update.message.reply_text(
                '‚ö†Ô∏è ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng YYYY-MM-DD.\n'
                'V√≠ d·ª•: `/predict FPT short 2025-08-05`',
                parse_mode="Markdown"
            )
            return
    
    # Hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p d·ª±a tr√™n c√°c tham s·ªë
    message_text = f'‚è≥ ƒêang ph√¢n t√≠ch m√£ *{symbol}* (khung th·ªùi gian: *{range_value}*, ƒë·∫øn ng√†y: *{end_date}*)'
    
    # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
    processing_message = await update.message.reply_text(
        message_text,
        parse_mode="Markdown"
    )
    
    try:
        # Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i ƒë·∫øn API
        request_data = {
            "symbol": symbol, 
            "range": range_value,
            "endDate": end_date  # Lu√¥n c√≥ gi√° tr·ªã: ho·∫∑c l√† ng√†y ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, ho·∫∑c l√† ng√†y hi·ªán t·∫°i ƒë√£ ƒë·ªãnh d·∫°ng
        }
            
        # G·ªçi API
        response = requests.post(
            f"{os.getenv('SERVER_URL')}/predict", 
            json=request_data
        )
        
        if response.status_code == 200:
            result = response.json()
            
            # T·∫°o icon theo khuy·∫øn ngh·ªã
            recommendation_icon = "üü¢" if result['final_statement'] == "BUY" else "üî¥" if result['final_statement'] == "SELL" else "üü°"
            
            # T·∫°o ph·∫£n h·ªìi chi ti·∫øt
            message = f"*üìä PH√ÇN T√çCH M√É {symbol}*\n"
            message += f"*Khung th·ªùi gian:* {range_value.upper()}\n"
            if 'startDate' in result and 'endDate' in result:
                message += f"*D·ªØ li·ªáu:* {result['startDate']} - {result['endDate']}\n"
            message += f"*Khuy·∫øn ngh·ªã:* {recommendation_icon} *{result['final_statement']}*\n\n"
            
            # Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng ch·ªâ b√°o
            message += "*üíπ CHI TI·∫æT PH√ÇN T√çCH:*\n\n"
            
            # ƒê·ªãnh nghƒ©a icon cho t·ª´ng lo·∫°i ch·ªâ b√°o
            indicator_icons = {
                "RSI": "üìà",
                "Moving Averages": "üìâ",
                "MACD": "üìä",
                "Bollinger Bands": "üîî",
                "Candlestick Patterns": "üïØÔ∏è"
            }
            
            # ƒê·ªãnh nghƒ©a icon cho t·ª´ng khuy·∫øn ngh·ªã
            signal_icons = {
                "BUY": "üü¢",
                "SELL": "üî¥",
                "HOLD": "üü°",
                "BULLISH": "üü¢",
                "BEARISH": "üî¥",
                "NEUTRAL": "üü°"
            }
            
            # Th√™m ph√¢n t√≠ch chi ti·∫øt v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp h∆°n
            for indicator, analysis in result["analysis"].items():
                # L·∫•y icon cho lo·∫°i ch·ªâ b√°o, m·∫∑c ƒë·ªãnh l√† üîç n·∫øu kh√¥ng c√≥
                icon = indicator_icons.get(indicator, "üîç")
                
                # L·∫•y icon cho khuy·∫øn ngh·ªã, m·∫∑c ƒë·ªãnh l√† ‚ö™ n·∫øu kh√¥ng c√≥
                statement_icon = signal_icons.get(analysis['statement'], "‚ö™")
                
                # T√™n ch·ªâ b√°o v√† khuy·∫øn ngh·ªã
                message += f"{icon} *{indicator}*: {statement_icon} {analysis['statement']}\n"
                
                # Th√™m chi ti·∫øt ph√¢n t√≠ch c·ªßa t·ª´ng ch·ªâ b√°o
                if 'analysis' in analysis and analysis['analysis']:
                    for signal in analysis['analysis']:
                        if 'signal' in signal and 'reason' in signal and 'date' in signal:
                            # L·∫•y icon cho t√≠n hi·ªáu
                            signal_icon = signal_icons.get(signal['signal'], "‚ö™")
                            message += f"   ‚Ä¢ {signal['date']}: {signal_icon} {signal['signal']} - {signal['reason']}\n"
                
                # Th√™m th√¥ng tin b·ªï sung n·∫øu c√≥
                if 'details' in analysis and analysis['details']:
                    message += f"   ‚Ä¢ *Chi ti·∫øt:* {analysis['details']}\n"
                
                message += "\n"
            
            # Th√™m l∆∞u √Ω/disclaimer
            message += "*L∆∞u √Ω:* ƒê√¢y l√† ph√¢n t√≠ch k·ªπ thu·∫≠t t·ª± ƒë·ªông, ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o."
            
            # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=processing_message.message_id
            )
            
            # G·ª≠i k·∫øt qu·∫£ ph√¢n t√≠ch
            await update.message.reply_text(message, parse_mode="Markdown")
        else:
            # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=processing_message.message_id
            )
            
            error_message = f"‚ùå L·ªói: {response.status_code}"
            try:
                error_detail = response.json().get("detail", response.text)
                error_message += f"\n{error_detail}"
            except:
                error_message += f"\n{response.text}"
                
            await update.message.reply_text(error_message)
    
    except Exception as e:
        logger.error(f"Error in predict command: {str(e)}", exc_info=True)
        # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=processing_message.message_id
            )
        except:
            pass
            
        await update.message.reply_text(
            f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi API: {str(e)}\n"
            f"Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi ho·∫∑c th·ª≠ l·∫°i sau."
        )

async def chart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """H√†m xem bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t c·ªßa m√£ ch·ª©ng kho√°n"""
    if not context.args:
        await update.message.reply_text(
            '‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n!\n'
            'V√≠ d·ª•: `/chart FPT`\n'
            'Ho·∫∑c v·ªõi kho·∫£ng th·ªùi gian: `/chart FPT 2023-01-01 2023-03-01`',
            parse_mode="Markdown"
        )
        return
    
    symbol = context.args[0].upper()
    
    # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
    processing_message = await update.message.reply_text(
        f'‚è≥ ƒêang t·∫°o bi·ªÉu ƒë·ªì cho m√£ *{symbol}*...',
        parse_mode="Markdown"
    )
    
    try:
        # Kh·ªüi t·∫°o c√°c bi·∫øn startDate v√† endDate (c√≥ th·ªÉ ƒë·ªÉ tr·ªëng, API s·∫Ω x·ª≠ l√Ω)
        start_date = None
        end_date = None
        
        # Ki·ªÉm tra n·∫øu c√≥ tham s·ªë cho start_date
        if len(context.args) > 1:
            try:
                # ƒê·ªãnh d·∫°ng YYYY-MM-DD
                start_date = context.args[1]
                datetime.datetime.strptime(start_date, '%Y-%m-%d')  # Validate format
            except ValueError:
                await update.message.reply_text(
                    '‚ö†Ô∏è ƒê·ªãnh d·∫°ng ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng YYYY-MM-DD.\n'
                    'V√≠ d·ª•: `/chart FPT 2023-01-01`',
                    parse_mode="Markdown"
                )
                await context.bot.delete_message(
                    chat_id=update.message.chat_id,
                    message_id=processing_message.message_id
                )
                return
                
        # Ki·ªÉm tra n·∫øu c√≥ tham s·ªë cho end_date
        if len(context.args) > 2:
            try:
                # ƒê·ªãnh d·∫°ng YYYY-MM-DD
                end_date = context.args[2]
                datetime.datetime.strptime(end_date, '%Y-%m-%d')  # Validate format
            except ValueError:
                await update.message.reply_text(
                    '‚ö†Ô∏è ƒê·ªãnh d·∫°ng ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng YYYY-MM-DD.\n'
                    'V√≠ d·ª•: `/chart FPT 2023-01-01 2023-03-01`',
                    parse_mode="Markdown"
                )
                await context.bot.delete_message(
                    chat_id=update.message.chat_id,
                    message_id=processing_message.message_id
                )
                return
        
        # L·∫•y settings c·ªßa ng∆∞·ªùi d√πng
        user_id = update.effective_user.id
        plot_settings = get_plot_settings(user_id)
        
        # Chu·∫©n b·ªã request data v·ªõi settings c·ªßa ng∆∞·ªùi d√πng
        request_data = {
            "symbol": symbol,
            **plot_settings  # Tr·∫£i r·ªông t·∫•t c·∫£ settings c·ªßa ng∆∞·ªùi d√πng
        }
        
        # Th√™m startDate v√† endDate n·∫øu ƒë∆∞·ª£c cung c·∫•p
        if start_date:
            request_data["startDate"] = start_date
            
        if end_date:
            request_data["endDate"] = end_date
        
        # G·ªçi API
        response = requests.post(
            f"{os.getenv('SERVER_URL')}/plot", 
            json=request_data
        )
        
        if response.status_code == 200:
            result = response.json()
            
            # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=processing_message.message_id
            )
            
            # G·ª≠i bi·ªÉu ƒë·ªì
            if "chart_url" in result:
                caption = f"üìä *Bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t {symbol}*\n"
                
                # Ki·ªÉm tra nhi·ªÅu tr∆∞·ªùng h·ª£p kh√°c nhau v·ªÅ key trong response
                if "startDate" in result and "endDate" in result:
                    # ƒê·ªãnh d·∫°ng ng√†y t·ª´ YYYY-MM-DD sang DD/MM/YYYY cho hi·ªÉn th·ªã
                    try:
                        start_display = datetime.datetime.strptime(result['startDate'], '%Y-%m-%d').strftime('%d/%m/%Y')
                        end_display = datetime.datetime.strptime(result['endDate'], '%Y-%m-%d').strftime('%d/%m/%Y')
                        caption += f"(D·ªØ li·ªáu t·ª´ {start_display} ƒë·∫øn {end_display})"
                    except (ValueError, KeyError):
                        # N·∫øu ƒë·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá, hi·ªÉn th·ªã nguy√™n b·∫£n
                        caption += f"(D·ªØ li·ªáu t·ª´ {result['startDate']} ƒë·∫øn {result['endDate']})"
                # Fallback cho kho·∫£ng th·ªùi gian m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ trong response
                else:
                    default_end_date = datetime.datetime.now().strftime('%d/%m/%Y')
                    default_start_date = (datetime.datetime.now() - datetime.timedelta(days=90)).strftime('%d/%m/%Y')
                    caption += f"(D·ªØ li·ªáu t·ª´ {default_start_date} ƒë·∫øn {default_end_date}, ∆∞·ªõc t√≠nh)"
                
                await update.message.reply_photo(
                    photo=result["chart_url"],
                    caption=caption,
                    parse_mode="Markdown"
                )
                
                # Ki·ªÉm tra c√°c th√¥ng tin b·ªï sung c·∫ßn hi·ªÉn th·ªã
                additional_info_sent = False
                
                # 1. Ph√¢n t√≠ch Candle Patterns n·∫øu CP ƒë∆∞·ª£c b·∫≠t trong settings
                if "candle_patterns" in result and plot_settings.get("CP", False):
                    additional_info_sent = True
                    patterns_message = "*üïØÔ∏è PH√ÇN T√çCH M·∫™U H√åNH N·∫æN:*\n\n"
                    
                    # L·∫•y c√°c patterns t·ª´ API response
                    candle_patterns = result["candle_patterns"]
                    
                    # Hi·ªÉn th·ªã th·ªëng k√™
                    if "candle_analysis" in candle_patterns:
                        stats = candle_patterns["candle_analysis"]
                        patterns_message += f"*Th·ªëng k√™:* {stats.get('total_special_candles', 0)} m·∫´u h√¨nh ƒë·∫∑c bi·ªát ƒë∆∞·ª£c ph√°t hi·ªán\n\n"
                    
                    # Hi·ªÉn th·ªã chi ti·∫øt c√°c m·∫´u h√¨nh n·∫øu c√≥
                    if "highlighted_patterns" in result:
                        highlighted = result["highlighted_patterns"]
                        patterns_message += "*M·∫´u h√¨nh n·∫øn ƒë√°nh d·∫•u:*\n"
                        
                        # Hi·ªÉn th·ªã c√°c lo·∫°i pattern ƒë∆∞·ª£c ƒë√°nh d·∫•u tr√™n bi·ªÉu ƒë·ªì
                        for pattern_name, pattern_info in highlighted.items():
                            patterns_message += f"‚Ä¢ {pattern_name}: {pattern_info['count']} l·∫ßn xu·∫•t hi·ªán\n"
                        
                        patterns_message += "\n"
                    
                    # Ph√¢n t√≠ch gaps n·∫øu c√≥
                    if "gap_analysis" in candle_patterns:
                        gaps = candle_patterns["gap_analysis"]
                        if gaps.get("total_gaps", 0) > 0:
                            patterns_message += f"*Gaps:* {gaps.get('total_gaps')} kho·∫£ng tr·ªëng ƒë∆∞·ª£c ph√°t hi·ªán\n"
                            patterns_message += f"‚Ä¢ Rising Windows (t√≠n hi·ªáu tƒÉng): {gaps.get('rising_windows', 0)}\n"
                            patterns_message += f"‚Ä¢ Falling Windows (t√≠n hi·ªáu gi·∫£m): {gaps.get('falling_windows', 0)}\n\n"
                    
                    await update.message.reply_text(
                        patterns_message,
                        parse_mode="Markdown"
                    )
                
                # 2. Ph√¢n t√≠ch Trend Analysis n·∫øu TR ƒë∆∞·ª£c b·∫≠t trong settings
                if "trend_analysis" in result and plot_settings.get("TR", False):
                    additional_info_sent = True
                    trend_message = "*üìà PH√ÇN T√çCH XU H∆Ø·ªöNG:*\n\n"
                    
                    # L·∫•y th√¥ng tin t·ª´ API response
                    trend_data = result["trend_analysis"]
                    
                    # Hi·ªÉn th·ªã t√≥m t·∫Øt xu h∆∞·ªõng
                    if "summary" in trend_data:
                        summary = trend_data["summary"]
                        total_periods = summary.get("total_periods", 0)
                        dominant_trend = summary.get("dominant_trend")
                        
                        # Bi·ªÉu t∆∞·ª£ng xu h∆∞·ªõng
                        trend_icon = "üü¢" if dominant_trend == "uptrend" else "üî¥" if dominant_trend == "downtrend" else "ÔøΩ"
                        
                        # T√™n xu h∆∞·ªõng ti·∫øng Vi·ªát
                        trend_name_vi = "TƒÉng" if dominant_trend == "uptrend" else "Gi·∫£m" if dominant_trend == "downtrend" else "ƒêi ngang"
                        
                        trend_message += f"*Xu h∆∞·ªõng ch√≠nh:* {trend_icon} {trend_name_vi}\n"
                        trend_message += f"*S·ªë chu k·ª≥ ph√°t hi·ªán:* {total_periods}\n"
                        trend_message += f"‚Ä¢ Chu k·ª≥ tƒÉng: {summary.get('uptrend_periods', 0)}\n"
                        trend_message += f"‚Ä¢ Chu k·ª≥ gi·∫£m: {summary.get('downtrend_periods', 0)}\n\n"
                    
                    # Hi·ªÉn th·ªã chi ti·∫øt c√°c chu k·ª≥ xu h∆∞·ªõng (t·ªëi ƒëa 5 chu k·ª≥ g·∫ßn nh·∫•t)
                    if "weekly_trends" in trend_data:
                        trends = trend_data["weekly_trends"]
                        recent_trends = trends[-5:] if len(trends) > 5 else trends
                        
                        if recent_trends:
                            trend_message += "*C√°c chu k·ª≥ xu h∆∞·ªõng g·∫ßn ƒë√¢y:*\n"
                            
                            for trend in recent_trends:
                                trend_type = trend.get("trend")
                                period = trend.get("period")
                                percent_change = trend.get("percent_change")
                                days_count = trend.get("days_count")
                                
                                # Bi·ªÉu t∆∞·ª£ng xu h∆∞·ªõng
                                trend_icon = "üü¢" if trend_type == "uptrend" else "üî¥" if trend_type == "downtrend" else "üü°"
                                
                                trend_message += f"{trend_icon} *{period}* ({days_count} ng√†y): {percent_change}\n"
                    
                    await update.message.reply_text(
                        trend_message,
                        parse_mode="Markdown"
                    )
                
                # N·∫øu kh√¥ng c√≥ th√¥ng tin b·ªï sung n√†o ƒë∆∞·ª£c hi·ªÉn th·ªã nh∆∞ng CP ho·∫∑c TR ƒë∆∞·ª£c b·∫≠t
                if not additional_info_sent and (plot_settings.get("CP", False) or plot_settings.get("TR", False)):
                    await update.message.reply_text(
                        "‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin ph√¢n t√≠ch b·ªï sung n√†o ƒë∆∞·ª£c ph√°t hi·ªán cho m√£ n√†y.",
                        parse_mode="Markdown"
                    )
            else:
                await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì.")
        else:
            # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=processing_message.message_id
            )
            
            error_message = f"‚ùå L·ªói: {response.status_code}"
            try:
                error_detail = response.json().get("detail", response.text)
                error_message += f"\n{error_detail}"
            except:
                error_message += f"\n{response.text}"
                
            await update.message.reply_text(error_message)
    
    except Exception as e:
        logger.error(f"Error in chart command: {str(e)}", exc_info=True)
        # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=processing_message.message_id
            )
        except:
            pass
            
        await update.message.reply_text(
            f"‚ùå Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì: {str(e)}\n"
            f"Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi ho·∫∑c th·ª≠ l·∫°i sau."
        )

async def handle_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω tin nh·∫Øn kh√¥ng ph·∫£i l√† l·ªánh"""
    text = update.message.text
    
    # Ki·ªÉm tra xem c√≥ ph·∫£i l√† m√£ ch·ª©ng kho√°n kh√¥ng (3-4 ch·ªØ c√°i vi·∫øt hoa)
    if text.isupper() and 2 <= len(text) <= 4 and text.isalpha():
        # Ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒë√£ nh·∫≠p m√£ ch·ª©ng kho√°n
        keyboard = [
            [
                InlineKeyboardButton(f"Ph√¢n t√≠ch ng·∫Øn h·∫°n {text}", callback_data=f"analyze_{text}_short"),
                InlineKeyboardButton(f"Ph√¢n t√≠ch d√†i h·∫°n {text}", callback_data=f"analyze_{text}_long")
            ],
            [
                InlineKeyboardButton(f"Bi·ªÉu ƒë·ªì {text}", callback_data=f"chart_{text}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"B·∫°n mu·ªën th·ª±c hi·ªán h√†nh ƒë·ªông n√†o v·ªõi m√£ *{text}*?",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    else:
        # G·ª≠i h∆∞·ªõng d·∫´n n·∫øu kh√¥ng ph·∫£i l·ªánh
        await update.message.reply_text(
            "T√¥i kh√¥ng hi·ªÉu tin nh·∫Øn c·ªßa b·∫°n. Vui l√≤ng s·ª≠ d·ª•ng c√°c l·ªánh:\n"
            "/predict [m√£ CK] [short/long] - Ph√¢n t√≠ch c·ªï phi·∫øu\n"
            "/chart [m√£ CK] - Xem bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t\n"
            "/help - Xem h∆∞·ªõng d·∫´n chi ti·∫øt"
        )

async def callback_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω h√†nh ƒë·ªông t·ª´ inline keyboard buttons"""
    query = update.callback_query
    await query.answer()
    
    # X·ª≠ l√Ω c√°c lo·∫°i callback data
    if query.data.startswith("analyze_"):
        parts = query.data.split("_")
        symbol = parts[1]
        
        # Ki·ªÉm tra xem c√≥ tham s·ªë range kh√¥ng
        if len(parts) > 2:
            range_value = parts[2]  # short ho·∫∑c long
            context.args = [symbol, range_value]
        else:
            # N·∫øu kh√¥ng c√≥ tham s·ªë range, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            await query.message.reply_text(
                "‚ö†Ô∏è L·ªói: Thi·∫øu tham s·ªë khung th·ªùi gian (short/long).",
                parse_mode="Markdown"
            )
            return
            
        await predict(query, context)
    
    elif query.data.startswith("chart_"):
        symbol = query.data.split("_")[1]
        # Gi·∫£ l·∫≠p l·ªánh chart
        context.args = [symbol]
        await chart(query, context)

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng s·ª≠ d·ª•ng l·ªánh /settings"""
    # Hi·ªÉn th·ªã c√°c n√∫t ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn c√°c ph·∫ßn c√†i ƒë·∫∑t kh√°c nhau
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è C√†i ƒë·∫∑t bi·ªÉu ƒë·ªì", callback_data="settings_plot")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üõ†Ô∏è *C√ÄI ƒê·∫∂T H·ªÜ TH·ªêNG*\n\n"
        "Vui l√≤ng ch·ªçn ph·∫ßn c√†i ƒë·∫∑t b·∫°n mu·ªën thay ƒë·ªïi:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def handle_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω callback t·ª´ c√°c n√∫t c√†i ƒë·∫∑t"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # X·ª≠ l√Ω hi·ªÉn th·ªã c√†i ƒë·∫∑t bi·ªÉu ƒë·ªì
    if query.data == "settings_plot":
        # L·∫•y c√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        plot_settings = get_plot_settings(user_id)
        
        # T·∫°o c√°c n√∫t toggle cho t·ª´ng c√†i ƒë·∫∑t
        keyboard = []
        
        # C√°c ch·ªâ b√°o k·ªπ thu·∫≠t ch√≠nh
        indicators = [
            ("MA", "Moving Averages"),
            ("BB", "Bollinger Bands"),
            ("RSI", "RSI"),
            ("MACD", "MACD"),
            ("ICH", "Ichimoku"),
            ("SR", "Support & Resistance"),
            ("TR", "Trend Analysis"),
            ("CP", "Candle Patterns")
        ]
        
        # Th√™m c√°c n√∫t ch·ªâ b√°o ch√≠nh
        for key, name in indicators:
            status = "‚úÖ B·∫≠t" if plot_settings.get(key, False) else "‚ùå T·∫Øt"
            keyboard.append([
                InlineKeyboardButton(f"{name}: {status}", callback_data=f"toggle_plot_{key}")
            ])
        
        # Th√™m n√∫t ƒë·ªÉ m·ªü r·ªông ph·∫ßn c√†i ƒë·∫∑t m·∫´u h√¨nh n·∫øn
        keyboard.append([
            InlineKeyboardButton("üìä C√†i ƒë·∫∑t m·∫´u h√¨nh n·∫øn", callback_data="settings_candle_patterns")
        ])
        
        # Th√™m n√∫t quay l·∫°i v√† kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh
        keyboard.append([
            InlineKeyboardButton("‚Ü©Ô∏è Quay l·∫°i", callback_data="settings_back"),
            InlineKeyboardButton("üîÑ M·∫∑c ƒë·ªãnh", callback_data="settings_plot_reset")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚öôÔ∏è *C√ÄI ƒê·∫∂T BI·ªÇU ƒê·ªí*\n\n"
            "Ch·ªçn c√°c ch·ªâ b√°o k·ªπ thu·∫≠t b·∫°n mu·ªën hi·ªÉn th·ªã tr√™n bi·ªÉu ƒë·ªì.\n"
            "C√†i ƒë·∫∑t n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng khi b·∫°n d√πng l·ªánh `/chart`.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    
    # X·ª≠ l√Ω hi·ªÉn th·ªã c√†i ƒë·∫∑t m·∫´u h√¨nh n·∫øn
    elif query.data == "settings_candle_patterns":
        # L·∫•y c√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        plot_settings = get_plot_settings(user_id)
        
        # C√°c m·∫´u h√¨nh n·∫øn
        patterns = [
            ("highlight_marubozu", "Marubozu"),
            ("highlight_spinning_top", "Spinning Top"),
            ("highlight_hammer", "Hammer"),
            ("highlight_hanging_man", "Hanging Man"),
            ("highlight_inverted_hammer", "Inverted Hammer"),
            ("highlight_shooting_star", "Shooting Star"),
            ("highlight_star_doji", "Star Doji"),
            ("highlight_long_legged_doji", "Long Legged Doji"),
            ("highlight_dragonfly_doji", "Dragonfly Doji"),
            ("highlight_gravestone_doji", "Gravestone Doji")
        ]
        
        # T·∫°o c√°c n√∫t toggle cho m·∫´u h√¨nh n·∫øn
        keyboard = []
        for key, name in patterns:
            status = "‚úÖ B·∫≠t" if plot_settings.get(key, False) else "‚ùå T·∫Øt"
            keyboard.append([
                InlineKeyboardButton(f"{name}: {status}", callback_data=f"toggle_plot_{key}")
            ])
        
        # Th√™m n√∫t quay l·∫°i
        keyboard.append([
            InlineKeyboardButton("‚Ü©Ô∏è Quay l·∫°i", callback_data="settings_plot")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üïØÔ∏è *C√ÄI ƒê·∫∂T M·∫™U H√åNH N·∫æN*\n\n"
            "Ch·ªçn c√°c m·∫´u h√¨nh n·∫øn b·∫°n mu·ªën ƒë√°nh d·∫•u tr√™n bi·ªÉu ƒë·ªì.\n"
            "L∆∞u √Ω: C√†i ƒë·∫∑t 'Candle Patterns' ph·∫£i ƒë∆∞·ª£c b·∫≠t ƒë·ªÉ c√°c ƒë√°nh d·∫•u n√†y c√≥ hi·ªáu l·ª±c.\n"
            "Ch·ªâ ƒë∆∞·ª£c b·∫≠t t·ªëi ƒëa 4 lo·∫°i n·∫øn c√πng l√∫c",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    
    # X·ª≠ l√Ω toggle c√†i ƒë·∫∑t
    elif query.data.startswith("toggle_plot_"):
        setting_key = query.data.replace("toggle_plot_", "")
        
        # L·∫•y c√†i ƒë·∫∑t hi·ªán t·∫°i v√† toggle gi√° tr·ªã
        plot_settings = get_plot_settings(user_id)
        current_value = plot_settings.get(setting_key, False)
        #plot_settings[setting_key] = not current_value
        
        # # L∆∞u c√†i ƒë·∫∑t m·ªõi
        # update_plot_settings(user_id, {setting_key: not current_value})
        
        if setting_key.startswith("highlight_") and not current_value:
    # Danh s√°ch c√°c key li√™n quan ƒë·∫øn m·∫´u h√¨nh n·∫øn
            candle_pattern_keys = [
                "highlight_marubozu", "highlight_spinning_top", "highlight_hammer",
                "highlight_hanging_man", "highlight_inverted_hammer", "highlight_shooting_star",
                "highlight_star_doji", "highlight_long_legged_doji", 
                "highlight_dragonfly_doji", "highlight_gravestone_doji"
            ]
    
    # ƒê·∫øm s·ªë m·∫´u h√¨nh n·∫øn ƒëang ƒë∆∞·ª£c b·∫≠t
            enabled_patterns = sum(1 for key in candle_pattern_keys if plot_settings.get(key, False))
    
    # N·∫øu ƒë√£ c√≥ 4 m·∫´u h√¨nh ƒë∆∞·ª£c b·∫≠t, kh√¥ng cho b·∫≠t th√™m
            if enabled_patterns >= 4:
                await query.answer("‚ö†Ô∏è Ch·ªâ ƒë∆∞·ª£c b·∫≠t t·ªëi ƒëa 4 lo·∫°i n·∫øn ƒë·∫∑c bi·ªát c√πng l√∫c. Vui l√≤ng t·∫Øt m·ªôt lo·∫°i tr∆∞·ªõc khi b·∫≠t lo·∫°i n√†y.")
                return
        
        # N·∫øu kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n ho·∫∑c ƒëang t·∫Øt m·ªôt c√†i ƒë·∫∑t, th·ª±c hi·ªán b√¨nh th∆∞·ªùng
        plot_settings[setting_key] = not current_value
        
        # L∆∞u c√†i ƒë·∫∑t m·ªõi
        update_plot_settings(user_id, {setting_key: not current_value})

        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v√† c·∫≠p nh·∫≠t menu
        if setting_key.startswith("highlight_"):
            await query.answer(f"ƒê√£ {'b·∫≠t' if not current_value else 't·∫Øt'} {setting_key.replace('highlight_', '')}")
            # T·∫°o l·∫°i menu c√†i ƒë·∫∑t m·∫´u h√¨nh n·∫øn
            # L·∫•y c√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
            plot_settings = get_plot_settings(user_id)
            
            # C√°c m·∫´u h√¨nh n·∫øn
            patterns = [
                ("highlight_marubozu", "Marubozu"),
                ("highlight_spinning_top", "Spinning Top"),
                ("highlight_hammer", "Hammer"),
                ("highlight_hanging_man", "Hanging Man"),
                ("highlight_inverted_hammer", "Inverted Hammer"),
                ("highlight_shooting_star", "Shooting Star"),
                ("highlight_star_doji", "Star Doji"),
                ("highlight_long_legged_doji", "Long Legged Doji"),
                ("highlight_dragonfly_doji", "Dragonfly Doji"),
                ("highlight_gravestone_doji", "Gravestone Doji")
            ]
            
            # T·∫°o c√°c n√∫t toggle cho m·∫´u h√¨nh n·∫øn
            keyboard = []
            for key, name in patterns:
                status = "‚úÖ B·∫≠t" if plot_settings.get(key, False) else "‚ùå T·∫Øt"
                keyboard.append([
                    InlineKeyboardButton(f"{name}: {status}", callback_data=f"toggle_plot_{key}")
                ])
            
            # Th√™m n√∫t quay l·∫°i
            keyboard.append([
                InlineKeyboardButton("‚Ü©Ô∏è Quay l·∫°i", callback_data="settings_plot")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üïØÔ∏è *C√ÄI ƒê·∫∂T M·∫™U H√åNH N·∫æN*\n\n"
                "Ch·ªçn c√°c m·∫´u h√¨nh n·∫øn b·∫°n mu·ªën ƒë√°nh d·∫•u tr√™n bi·ªÉu ƒë·ªì.\n"
                "L∆∞u √Ω: C√†i ƒë·∫∑t 'Candle Patterns' ph·∫£i ƒë∆∞·ª£c b·∫≠t ƒë·ªÉ c√°c ƒë√°nh d·∫•u n√†y c√≥ hi·ªáu l·ª±c.\n"
                "Ch·ªâ ƒë∆∞·ª£c ph√©p hi·ªÉn th·ªã t·ªëi ƒëa 4 lo·∫°i n·∫øn c√πng l√∫c. Vui l√≤ng t·∫Øt m·ªôt lo·∫°i n·∫øn kh√°c tr∆∞·ªõc.",
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
        else:
            await query.answer(f"ƒê√£ {'b·∫≠t' if not current_value else 't·∫Øt'} {setting_key}")
            # T·∫°o l·∫°i menu c√†i ƒë·∫∑t ch√≠nh
            # L·∫•y c√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
            plot_settings = get_plot_settings(user_id)
            
            # T·∫°o c√°c n√∫t toggle cho t·ª´ng c√†i ƒë·∫∑t
            keyboard = []
            
            # C√°c ch·ªâ b√°o k·ªπ thu·∫≠t ch√≠nh
            indicators = [
                ("MA", "Moving Averages"),
                ("BB", "Bollinger Bands"),
                ("RSI", "RSI"),
                ("MACD", "MACD"),
                ("ICH", "Ichimoku"),
                ("SR", "Support & Resistance"),
                ("TR", "Trend Analysis"),
                ("CP", "Candle Patterns")
            ]
            
            # Th√™m c√°c n√∫t ch·ªâ b√°o ch√≠nh
            for key, name in indicators:
                status = "‚úÖ B·∫≠t" if plot_settings.get(key, False) else "‚ùå T·∫Øt"
                keyboard.append([
                    InlineKeyboardButton(f"{name}: {status}", callback_data=f"toggle_plot_{key}")
                ])
            
            # Th√™m n√∫t ƒë·ªÉ m·ªü r·ªông ph·∫ßn c√†i ƒë·∫∑t m·∫´u h√¨nh n·∫øn
            keyboard.append([
                InlineKeyboardButton("üìä C√†i ƒë·∫∑t m·∫´u h√¨nh n·∫øn", callback_data="settings_candle_patterns")
            ])
            
            # Th√™m n√∫t quay l·∫°i v√† kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh
            keyboard.append([
                InlineKeyboardButton("‚Ü©Ô∏è Quay l·∫°i", callback_data="settings_back"),
                InlineKeyboardButton("üîÑ M·∫∑c ƒë·ªãnh", callback_data="settings_plot_reset")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚öôÔ∏è *C√ÄI ƒê·∫∂T BI·ªÇU ƒê·ªí*\n\n"
                "Ch·ªçn c√°c ch·ªâ b√°o k·ªπ thu·∫≠t b·∫°n mu·ªën hi·ªÉn th·ªã tr√™n bi·ªÉu ƒë·ªì.\n"
                "C√†i ƒë·∫∑t n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng khi b·∫°n d√πng l·ªánh `/chart`.",
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
        return
    
    # X·ª≠ l√Ω kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh
    elif query.data == "settings_plot_reset":
        # Kh√¥i ph·ª•c t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh
        update_plot_settings(user_id, DEFAULT_PLOT_SETTINGS)
        
        await query.answer("ƒê√£ kh√¥i ph·ª•c c√†i ƒë·∫∑t bi·ªÉu ƒë·ªì v·ªÅ m·∫∑c ƒë·ªãnh")
        
        # T·∫°o l·∫°i menu c√†i ƒë·∫∑t ch√≠nh v·ªõi c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh
        plot_settings = get_plot_settings(user_id)
            
        # T·∫°o c√°c n√∫t toggle cho t·ª´ng c√†i ƒë·∫∑t
        keyboard = []
        
        # C√°c ch·ªâ b√°o k·ªπ thu·∫≠t ch√≠nh
        indicators = [
            ("MA", "Moving Averages"),
            ("BB", "Bollinger Bands"),
            ("RSI", "RSI"),
            ("MACD", "MACD"),
            ("ICH", "Ichimoku"),
            ("SR", "Support & Resistance"),
            ("TR", "Trend Analysis"),
            ("CP", "Candle Patterns")
        ]
        
        # Th√™m c√°c n√∫t ch·ªâ b√°o ch√≠nh
        for key, name in indicators:
            status = "‚úÖ B·∫≠t" if plot_settings.get(key, False) else "‚ùå T·∫Øt"
            keyboard.append([
                InlineKeyboardButton(f"{name}: {status}", callback_data=f"toggle_plot_{key}")
            ])
        
        # Th√™m n√∫t ƒë·ªÉ m·ªü r·ªông ph·∫ßn c√†i ƒë·∫∑t m·∫´u h√¨nh n·∫øn
        keyboard.append([
            InlineKeyboardButton("üìä C√†i ƒë·∫∑t m·∫´u h√¨nh n·∫øn", callback_data="settings_candle_patterns")
        ])
        
        # Th√™m n√∫t quay l·∫°i v√† kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh
        keyboard.append([
            InlineKeyboardButton("‚Ü©Ô∏è Quay l·∫°i", callback_data="settings_back"),
            InlineKeyboardButton("üîÑ M·∫∑c ƒë·ªãnh", callback_data="settings_plot_reset")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚öôÔ∏è *C√ÄI ƒê·∫∂T BI·ªÇU ƒê·ªí*\n\n"
            "Ch·ªçn c√°c ch·ªâ b√°o k·ªπ thu·∫≠t b·∫°n mu·ªën hi·ªÉn th·ªã tr√™n bi·ªÉu ƒë·ªì.\n"
            "C√†i ƒë·∫∑t n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng khi b·∫°n d√πng l·ªánh `/chart`.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        return
    
    # X·ª≠ l√Ω quay l·∫°i
    elif query.data == "settings_back":
        await settings_command(query, context)

def main() -> None:
    """H√†m ch√≠nh ƒë·ªÉ kh·ªüi ch·∫°y bot"""
    # Kh·ªüi t·∫°o bot v·ªõi token
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong file .env")
        return
        
    app = ApplicationBuilder().token(token).build()
    
    # ƒêƒÉng k√Ω c√°c handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("predict", predict))
    app.add_handler(CommandHandler("chart", chart))
    app.add_handler(CommandHandler("settings", settings_command))
    
    # Callback handlers cho c√°c inline buttons
    app.add_handler(CallbackQueryHandler(button_handler, pattern=r"^help_"))
    app.add_handler(CallbackQueryHandler(callback_actions, pattern=r"^(analyze_|chart_)"))
    app.add_handler(CallbackQueryHandler(handle_settings_callback, pattern=r"^(settings_|toggle_plot_)"))
    
    # Handler cho c√°c tin nh·∫Øn kh√¥ng ph·∫£i l·ªánh
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unknown))
    
    # B·∫Øt ƒë·∫ßu bot
    logger.info("Bot ƒëang ch·∫°y...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()